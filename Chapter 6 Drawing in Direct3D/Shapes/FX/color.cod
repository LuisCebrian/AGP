//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer $Globals
{
    float3  light = { 0.192450091, 0.962250471, -0.192450091 };// Offset:    0, size:   12
}

cbuffer cbPerObject
{
    float4x4 gWorldViewProj;            // Offset:    0, size:   64
}

cbuffer globalTime
{
    float   iGlobalTime;                // Offset:    0, size:    4
}

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ColorTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vin.Pos.x; v0.y <- vin.Pos.y; v0.z <- vin.Pos.z; 
                //   v1.x <- vin.Color.x; v1.y <- vin.Color.y; v1.z <- vin.Color.z; v1.w <- vin.Color.w; 
                //   o1.x <- <VS return value>.Color.x; o1.y <- <VS return value>.Color.y; o1.z <- <VS return value>.Color.z; o1.w <- <VS return value>.Color.w; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 47 "C:\Users\Luis\Desktop\LunaCh1_10\Chapter 6 Drawing in Direct3D\Shapes\FX\color.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.PosH.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.PosH.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.PosH.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.PosH.w
                
                #line 50
                mov r0.xyzw, v1.xyzw  // r0.x <- vout.Color.x; r0.y <- vout.Color.y; r0.z <- vout.Color.z; r0.w <- vout.Color.w
                mov o0.xyzw, r1.xyzw
                mov o1.xyzw, r0.xyzw
                ret 
                // Approximately 10 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float3 light;                      // Offset:    0 Size:    12
                //      = 0x3e4511a3 0x3f76560c 0xbe4511a3 
                //
                // }
                //
                // cbuffer globalTime
                // {
                //
                //   float iGlobalTime;                 // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // $Globals                          cbuffer      NA          NA    0        1
                // globalTime                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xy  
                // COLOR                    0   xyzw        1     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_output o0.xyzw
                dcl_temps 10
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.Color.x; v1.y <- pin.Color.y; v1.z <- pin.Color.z; v1.w <- pin.Color.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 108 "C:\Users\Luis\Desktop\LunaCh1_10\Chapter 6 Drawing in Direct3D\Shapes\FX\color.fx"
                utof r0.xyz, l(0, 0, 0, 0)
                utof r1.xyz, l(0, 0, 0, 0)
                utof r2.xyz, l(0, 0, 0, 0)
                utof r3.xyz, l(0, 0, 0, 0)
                utof r4.xyz, l(0, 0, 0, 0)
                utof r5.xyz, l(0, 0, 0, 0)
                utof r6.xyz, l(0, 0, 0, 0)
                utof r7.xyz, l(0, 0, 0, 0)
                utof r8.xyz, l(0, 0, 0, 0)
                mov x0[0].xyz, r0.xyzx
                mov x0[1].xyz, r1.xyzx
                mov x0[2].xyz, r2.xyzx
                mov x0[3].xyz, r3.xyzx
                mov x0[4].xyz, r4.xyzx
                mov x0[5].xyz, r5.xyzx
                mov x0[6].xyz, r6.xyzx
                mov x0[7].xyz, r7.xyzx
                mov x0[8].xyz, r8.xyzx
                
                #line 193
                itof r0.xy, l(800, 800, 0, 0)  // r0.x <- iResolution.x; r0.y <- iResolution.y
                itof r0.zw, l(0, 0, 400, 400)  // r0.z <- iMouse.x; r0.w <- iMouse.y
                div r1.xy, v0.xyxx, r0.xyxx
                mov r1.zw, l(-0.000000,-0.000000,-0.500000,-0.500000)
                add r1.yw, r1.wwwz, r1.yyyx  // r1.y <- uv.y; r1.w <- uv.x
                itof r2.x, l(1)
                mul r1.x, r1.w, r2.x  // r1.x <- uv.x
                div r0.xy, r0.zwzz, r0.xyxx
                mov r0.zw, l(-0.000000,-0.000000,-0.500000,-0.500000)
                add r0.xy, r0.zwzz, r0.xyxx  // r0.x <- mouse.x; r0.y <- mouse.y
                mul r0.z, cb1[0].x, l(0.500000)
                mul r0.z, r0.z, l(1.000000)
                add r0.z, r0.z, l(2.000000)  // r0.z <- t
                mov r0.w, l(0)
                mov r2.x, r0.w
                loop 
                  ilt r2.y, r2.x, l(9)
                  breakc_z r2.y
                  mul r2.y, r0.z, l(0.967000)
                  itof r2.z, r2.x
                  mul r2.z, r2.z, l(42.000000)
                  add r2.y, r2.z, r2.y
                  sincos r3.x, null, r2.y
                  mul r2.y, r0.z, l(0.423000)
                  itof r2.z, r2.x
                  mul r2.z, r2.z, l(152.000000)
                  add r2.y, r2.z, r2.y
                  sincos r3.y, null, r2.y
                  mul r2.y, r0.z, l(0.763210)
                  itof r2.z, r2.x
                  add r2.y, r2.z, r2.y
                  sincos r3.z, null, r2.y
                  mul r2.yzw, r3.xxyz, l(0.000000, 1.300000, 1.300000, 1.300000)
                  mov x0[r2.x + 0].xyz, r2.yzwy
                
                #line 207
                  iadd r2.x, r2.x, l(1)
                endloop 
                
                #line 210
                mov r2.xyz, l(0,0,-4.000000,0)  // r2.x <- p.x; r2.y <- p.y; r2.z <- p.z
                nop 
                mov r2.xyz, r2.xyzx
                mul r0.z, r0.y, l(9.000000)
                add r0.z, r0.z, l(4.700000)
                
                #line 98
                sincos null, r3.z, r0.z  // r3.z <- ca
                sincos r4.z, null, r0.z  // r4.z <- sa
                mov r4.y, r3.z  // r4.y <- p._m11
                mov r3.y, -r4.z  // r3.y <- p._m12
                mov r4.z, r4.z  // r4.z <- p._m21
                mov r3.z, r3.z  // r3.z <- p._m22
                mov r5.xyz, l(1.000000,0,0,0)  // r5.x <- p._m00; r5.y <- p._m10; r5.z <- p._m20
                mov r4.x, l(0)  // r4.x <- p._m01
                mov r3.x, l(0)  // r3.x <- p._m02
                dp3 r5.x, r2.xyzx, r5.xyzx  // r5.x <- <rotate_x return value>.x
                dp3 r5.y, r2.xyzx, r4.xyzx  // r5.y <- <rotate_x return value>.y
                dp3 r5.z, r2.xyzx, r3.xyzx  // r5.z <- <rotate_x return value>.z
                
                #line 211
                mov r5.xyz, r5.xyzx  // r5.x <- p.x; r5.y <- p.y; r5.z <- p.z
                nop 
                mov r5.xyz, r5.xyzx
                mul r0.z, r0.x, l(9.000000)
                add r0.z, r0.z, l(4.600000)
                
                #line 90
                sincos null, r2.z, r0.z  // r2.z <- ca
                sincos r3.z, null, r0.z  // r3.z <- sa
                mov r3.x, r2.z  // r3.x <- p._m00
                mov r2.x, -r3.z  // r2.x <- p._m02
                mov r3.z, r3.z  // r3.z <- p._m20
                mov r2.z, r2.z  // r2.z <- p._m22
                mov r3.y, l(0)  // r3.y <- p._m10
                mov r4.xyz, l(0,1.000000,0,0)  // r4.x <- p._m01; r4.y <- p._m11; r4.z <- p._m21
                mov r2.y, l(0)  // r2.y <- p._m12
                dp3 r3.x, r5.xyzx, r3.xyzx  // r3.x <- <rotate_y return value>.x
                dp3 r3.y, r5.xyzx, r4.xyzx  // r3.y <- <rotate_y return value>.y
                dp3 r3.z, r5.xyzx, r2.xyzx  // r3.z <- <rotate_y return value>.z
                
                #line 212
                mov r3.xyz, r3.xyzx  // r3.x <- p.x; r3.y <- p.y; r3.z <- p.z
                mov r1.z, l(1.000000)
                mov r1.xyz, r1.xyzx  // r1.x <- d.x; r1.y <- d.y; r1.z <- d.z
                dp3 r0.z, r1.xyzx, r1.xyzx
                sqrt r0.z, r0.z
                mul r0.z, r0.z, l(0.500000)
                mov r0.z, -r0.z
                add r1.w, r0.z, r1.z  // r1.w <- d.z
                dp3 r0.z, r1.xywx, r1.xywx
                rsq r0.z, r0.z
                mul r2.xyz, r0.zzzz, r1.xywx  // r2.x <- d.x; r2.y <- d.y; r2.z <- d.z
                nop 
                mov r2.xyz, r2.xyzx
                mul r0.y, r0.y, l(9.000000)
                add r0.y, r0.y, l(4.700000)
                
                #line 98
                sincos null, r4.z, r0.y  // r4.z <- ca
                sincos r5.z, null, r0.y  // r5.z <- sa
                mov r5.y, r4.z  // r5.y <- p._m11
                mov r4.y, -r5.z  // r4.y <- p._m12
                mov r5.z, r5.z  // r5.z <- p._m21
                mov r4.z, r4.z  // r4.z <- p._m22
                mov r0.yzw, l(0,1.000000,0,0)  // r0.y <- p._m00; r0.z <- p._m10; r0.w <- p._m20
                mov r5.x, l(0)  // r5.x <- p._m01
                mov r4.x, l(0)  // r4.x <- p._m02
                dp3 r6.x, r2.xyzx, r0.yzwy  // r6.x <- <rotate_x return value>.x
                dp3 r6.y, r2.xyzx, r5.xyzx  // r6.y <- <rotate_x return value>.y
                dp3 r6.z, r2.xyzx, r4.xyzx  // r6.z <- <rotate_x return value>.z
                
                #line 216
                mov r6.xyz, r6.xyzx  // r6.x <- d.x; r6.y <- d.y; r6.z <- d.z
                nop 
                mov r6.xyz, r6.xyzx
                mul r0.x, r0.x, l(9.000000)
                add r0.x, r0.x, l(4.600000)
                
                #line 90
                sincos null, r2.z, r0.x  // r2.z <- ca
                sincos r0.z, null, r0.x  // r0.z <- sa
                mov r0.x, r2.z  // r0.x <- p._m00
                mov r2.x, -r0.z  // r2.x <- p._m02
                mov r0.z, r0.z  // r0.z <- p._m20
                mov r2.z, r2.z  // r2.z <- p._m22
                mov r0.y, l(0)  // r0.y <- p._m10
                mov r4.xyz, l(0,1.000000,0,0)  // r4.x <- p._m01; r4.y <- p._m11; r4.z <- p._m21
                mov r2.y, l(0)  // r2.y <- p._m12
                dp3 r0.x, r6.xyzx, r0.xyzx  // r0.x <- <rotate_y return value>.x
                dp3 r0.y, r6.xyzx, r4.xyzx  // r0.y <- <rotate_y return value>.y
                dp3 r0.z, r6.xyzx, r2.xyzx  // r0.z <- <rotate_y return value>.z
                
                #line 217
                mov r0.xyz, r0.xyzx  // r0.x <- d.x; r0.y <- d.y; r0.z <- d.z
                
                #line 222
                mov r0.w, l(0)  // r0.w <- i
                mov r2.xyz, r3.xyzx  // r2.x <- p.x; r2.y <- p.y; r2.z <- p.z
                mov r1.z, l(0)  // r1.z <- dd
                mov r1.w, r0.w  // r1.w <- i
                loop 
                  ilt r2.w, r1.w, l(33)
                  breakc_z r2.w
                  nop 
                  mov r2.xyz, r2.xyzx
                
                #line 112
                  mov r2.w, l(1024.000000)  // r2.w <- d
                  mov r3.w, l(0)  // r3.w <- i
                  mov r4.x, r2.w  // r4.x <- d
                  mov r4.y, r3.w  // r4.y <- i
                  loop 
                    ilt r4.z, r4.y, l(9)
                    breakc_z r4.z
                    mov r5.xyz, x0[r4.y + 0].xyzx
                    add r5.xyz, r2.xyzx, r5.xyzx  // r5.x <- np.x; r5.y <- np.y; r5.z <- np.z
                    nop 
                    mov r4.z, -r5.x
                    max r4.z, r4.z, r5.x
                    mov r4.w, -r5.y
                    max r4.w, r4.w, r5.y
                    mov r5.w, -r5.z
                    max r5.w, r5.w, r5.z
                
                #line 105
                    max r4.w, r4.w, r5.w
                    max r4.z, r4.w, r4.z  // r4.z <- <max3 return value>
                
                #line 117
                    mov r4.w, l(-1.000000)
                    add r4.z, r4.w, r4.z  // r4.z <- shape0
                    dp3 r4.w, r5.xyzx, r5.xyzx
                    sqrt r4.w, r4.w
                    mov r5.x, l(-1.000000)
                    add r4.w, r4.w, r5.x  // r4.w <- shape1
                    mov r5.x, -r4.z
                    add r4.w, r4.w, r5.x
                    mul r4.w, r4.w, l(2.000000)
                    add r4.z, r4.w, r4.z  // r4.z <- nd
                    mov r4.w, -r4.z
                    add r4.w, r4.w, r4.x
                    mov r5.x, l(1.000000)
                    add r5.y, r5.x, l(1.000000)
                    add r4.w, r4.w, r5.x
                    div r5.x, l(1.000000, 1.000000, 1.000000, 1.000000), r5.y
                    mul r4.w, r4.w, r5.x
                    max r4.w, r4.w, l(0.000000)
                    min r4.w, r4.w, l(1.000000)
                    mul r5.x, r4.w, l(-2.000000)
                    add r5.x, r5.x, l(3.000000)
                    mul r4.w, r4.w, r4.w
                    mul r4.w, r4.w, r5.x
                    mov r5.x, -r4.x
                    add r4.z, r4.z, r5.x
                    mul r4.z, r4.z, r4.w
                    add r4.x, r4.z, r4.x
                    iadd r4.y, r4.y, l(1)
                  endloop 
                  mov r4.x, r4.x  // r4.x <- <dist return value>
                
                #line 224
                  mov r4.x, r4.x  // r4.x <- dd
                  mul r4.yzw, r0.xxyz, r4.xxxx
                  mul r4.yzw, r4.yyzw, l(0.000000, 0.700000, 0.700000, 0.700000)
                  add r4.yzw, r2.xxyz, r4.yyzw  // r4.y <- p.x; r4.z <- p.y; r4.w <- p.z
                  lt r2.w, r4.x, l(0.040000)
                  lt r3.w, l(4.000000), r4.x
                  or r2.w, r2.w, r3.w
                  if_nz r2.w
                    mov r2.xyz, r4.yzwy  // r2.x <- p.x; r2.y <- p.y; r2.z <- p.z
                    mov r1.z, r4.x  // r1.z <- dd
                    break 
                  endif   // r4.y <- p.x; r4.z <- p.y; r4.w <- p.z; r4.x <- dd
                
                #line 222
                  iadd r1.w, r1.w, l(1)
                
                #line 227
                  mov r2.xyz, r4.yzwy  // r2.x <- p.x; r2.y <- p.y; r2.z <- p.z
                  mov r1.z, r4.x  // r1.z <- dd
                endloop 
                lt r0.w, r1.z, l(0.500000)
                if_nz r0.w
                  nop 
                  mov r2.xyz, r2.xyzx
                  mov r0.xyz, r0.xyzx
                
                #line 159
                  mov r3.xyz, l(0.780399,0.346844,0.520266,0)  // r3.x <- color.x; r3.y <- color.y; r3.z <- color.z
                  nop 
                  mov r2.xyz, r2.xyzx
                  mov r4.z, l(0.100000)
                
                #line 127
                  nop 
                  mov r2.xyz, r2.xyzx
                
                #line 112
                  mov r0.w, l(1024.000000)  // r0.w <- d
                  mov r1.z, l(0)  // r1.z <- i
                  mov r1.w, r0.w  // r1.w <- d
                  mov r2.w, r1.z  // r2.w <- i
                  loop 
                    ilt r3.w, r2.w, l(9)
                    breakc_z r3.w
                    mov r5.xyz, x0[r2.w + 0].xyzx
                    add r5.xyz, r2.xyzx, r5.xyzx  // r5.x <- np.x; r5.y <- np.y; r5.z <- np.z
                    nop 
                    mov r3.w, -r5.x
                    max r3.w, r3.w, r5.x
                    mov r4.w, -r5.y
                    max r4.w, r4.w, r5.y
                    mov r5.w, -r5.z
                    max r5.w, r5.w, r5.z
                
                #line 105
                    max r4.w, r4.w, r5.w
                    max r3.w, r3.w, r4.w  // r3.w <- <max3 return value>
                
                #line 117
                    mov r4.w, l(-1.000000)
                    add r3.w, r3.w, r4.w  // r3.w <- shape0
                    dp3 r4.w, r5.xyzx, r5.xyzx
                    sqrt r4.w, r4.w
                    mov r5.x, l(-1.000000)
                    add r4.w, r4.w, r5.x  // r4.w <- shape1
                    mov r5.x, -r3.w
                    add r4.w, r4.w, r5.x
                    mul r4.w, r4.w, l(2.000000)
                    add r3.w, r3.w, r4.w  // r3.w <- nd
                    mov r4.w, -r3.w
                    add r4.w, r1.w, r4.w
                    mov r5.x, l(1.000000)
                    add r5.y, r5.x, l(1.000000)
                    add r4.w, r4.w, r5.x
                    div r5.x, l(1.000000, 1.000000, 1.000000, 1.000000), r5.y
                    mul r4.w, r4.w, r5.x
                    max r4.w, r4.w, l(0.000000)
                    min r4.w, r4.w, l(1.000000)
                    mul r5.x, r4.w, l(-2.000000)
                    add r5.x, r5.x, l(3.000000)
                    mul r4.w, r4.w, r4.w
                    mul r4.w, r4.w, r5.x
                    mov r5.x, -r1.w
                    add r3.w, r3.w, r5.x
                    mul r3.w, r3.w, r4.w
                    add r1.w, r1.w, r3.w
                    iadd r2.w, r2.w, l(1)
                  endloop 
                  mov r1.w, r1.w  // r1.w <- <dist return value>
                
                #line 127
                  mov r1.w, r1.w  // r1.w <- d
                  nop 
                  itof r4.xy, l(0, 0, 0, 0)
                  add r5.xyz, r2.xyzx, r4.zxyz
                
                #line 112
                  mov r0.w, l(1024.000000)  // r0.w <- d
                  mov r1.z, l(0)  // r1.z <- i
                  mov r2.w, r0.w  // r2.w <- d
                  mov r3.w, r1.z  // r3.w <- i
                  loop 
                    ilt r4.w, r3.w, l(9)
                    breakc_z r4.w
                    mov r6.xyz, x0[r3.w + 0].xyzx
                    add r6.xyz, r5.xyzx, r6.xyzx  // r6.x <- np.x; r6.y <- np.y; r6.z <- np.z
                    nop 
                    mov r4.w, -r6.x
                    max r4.w, r4.w, r6.x
                    mov r5.w, -r6.y
                    max r5.w, r5.w, r6.y
                    mov r6.w, -r6.z
                    max r6.w, r6.w, r6.z
                
                #line 105
                    max r5.w, r5.w, r6.w
                    max r4.w, r4.w, r5.w  // r4.w <- <max3 return value>
                
                #line 117
                    mov r5.w, l(-1.000000)
                    add r4.w, r4.w, r5.w  // r4.w <- shape0
                    dp3 r5.w, r6.xyzx, r6.xyzx
                    sqrt r5.w, r5.w
                    mov r6.x, l(-1.000000)
                    add r5.w, r5.w, r6.x  // r5.w <- shape1
                    mov r6.x, -r4.w
                    add r5.w, r5.w, r6.x
                    mul r5.w, r5.w, l(2.000000)
                    add r4.w, r4.w, r5.w  // r4.w <- nd
                    mov r5.w, -r4.w
                    add r5.w, r2.w, r5.w
                    mov r6.x, l(1.000000)
                    add r6.y, r6.x, l(1.000000)
                    add r5.w, r5.w, r6.x
                    div r6.x, l(1.000000, 1.000000, 1.000000, 1.000000), r6.y
                    mul r5.w, r5.w, r6.x
                    max r5.w, r5.w, l(0.000000)
                    min r5.w, r5.w, l(1.000000)
                    mul r6.x, r5.w, l(-2.000000)
                    add r6.x, r6.x, l(3.000000)
                    mul r5.w, r5.w, r5.w
                    mul r5.w, r5.w, r6.x
                    mov r6.x, -r2.w
                    add r4.w, r4.w, r6.x
                    mul r4.w, r4.w, r5.w
                    add r2.w, r2.w, r4.w
                    iadd r3.w, r3.w, l(1)
                  endloop 
                  mov r2.w, r2.w  // r2.w <- <dist return value>
                
                #line 128
                  mov r0.w, -r1.w
                  add r5.x, r0.w, r2.w
                  nop 
                  itof r4.xy, l(0, 0, 0, 0)
                  add r6.xyz, r2.xyzx, r4.xzyx
                
                #line 112
                  mov r0.w, l(1024.000000)  // r0.w <- d
                  mov r1.z, l(0)  // r1.z <- i
                  mov r2.w, r0.w  // r2.w <- d
                  mov r3.w, r1.z  // r3.w <- i
                  loop 
                    ilt r4.w, r3.w, l(9)
                    breakc_z r4.w
                    mov r7.xyz, x0[r3.w + 0].xyzx
                    add r7.xyz, r6.xyzx, r7.xyzx  // r7.x <- np.x; r7.y <- np.y; r7.z <- np.z
                    nop 
                    mov r4.w, -r7.x
                    max r4.w, r4.w, r7.x
                    mov r5.w, -r7.y
                    max r5.w, r5.w, r7.y
                    mov r6.w, -r7.z
                    max r6.w, r6.w, r7.z
                
                #line 105
                    max r5.w, r5.w, r6.w
                    max r4.w, r4.w, r5.w  // r4.w <- <max3 return value>
                
                #line 117
                    mov r5.w, l(-1.000000)
                    add r4.w, r4.w, r5.w  // r4.w <- shape0
                    dp3 r5.w, r7.xyzx, r7.xyzx
                    sqrt r5.w, r5.w
                    mov r6.w, l(-1.000000)
                    add r5.w, r5.w, r6.w  // r5.w <- shape1
                    mov r6.w, -r4.w
                    add r5.w, r5.w, r6.w
                    mul r5.w, r5.w, l(2.000000)
                    add r4.w, r4.w, r5.w  // r4.w <- nd
                    mov r5.w, -r4.w
                    add r5.w, r2.w, r5.w
                    mov r6.w, l(1.000000)
                    add r7.x, r6.w, l(1.000000)
                    add r5.w, r5.w, r6.w
                    div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.x
                    mul r5.w, r5.w, r6.w
                    max r5.w, r5.w, l(0.000000)
                    min r5.w, r5.w, l(1.000000)
                    mul r6.w, r5.w, l(-2.000000)
                    add r6.w, r6.w, l(3.000000)
                    mul r5.w, r5.w, r5.w
                    mul r5.w, r5.w, r6.w
                    mov r6.w, -r2.w
                    add r4.w, r4.w, r6.w
                    mul r4.w, r4.w, r5.w
                    add r2.w, r2.w, r4.w
                    iadd r3.w, r3.w, l(1)
                  endloop 
                  mov r2.w, r2.w  // r2.w <- <dist return value>
                
                #line 128
                  mov r0.w, -r1.w
                  add r5.y, r0.w, r2.w
                  nop 
                  itof r4.xy, l(0, 0, 0, 0)
                  add r4.xyz, r2.xyzx, r4.xyzx
                
                #line 112
                  mov r0.w, l(1024.000000)  // r0.w <- d
                  mov r1.z, l(0)  // r1.z <- i
                  mov r2.w, r0.w  // r2.w <- d
                  mov r3.w, r1.z  // r3.w <- i
                  loop 
                    ilt r4.w, r3.w, l(9)
                    breakc_z r4.w
                    mov r6.xyz, x0[r3.w + 0].xyzx
                    add r6.xyz, r4.xyzx, r6.xyzx  // r6.x <- np.x; r6.y <- np.y; r6.z <- np.z
                    nop 
                    mov r4.w, -r6.x
                    max r4.w, r4.w, r6.x
                    mov r5.w, -r6.y
                    max r5.w, r5.w, r6.y
                    mov r6.w, -r6.z
                    max r6.w, r6.w, r6.z
                
                #line 105
                    max r5.w, r5.w, r6.w
                    max r4.w, r4.w, r5.w  // r4.w <- <max3 return value>
                
                #line 117
                    mov r5.w, l(-1.000000)
                    add r4.w, r4.w, r5.w  // r4.w <- shape0
                    dp3 r5.w, r6.xyzx, r6.xyzx
                    sqrt r5.w, r5.w
                    mov r6.x, l(-1.000000)
                    add r5.w, r5.w, r6.x  // r5.w <- shape1
                    mov r6.x, -r4.w
                    add r5.w, r5.w, r6.x
                    mul r5.w, r5.w, l(2.000000)
                    add r4.w, r4.w, r5.w  // r4.w <- nd
                    mov r5.w, -r4.w
                    add r5.w, r2.w, r5.w
                    mov r6.x, l(1.000000)
                    add r6.y, r6.x, l(1.000000)
                    add r5.w, r5.w, r6.x
                    div r6.x, l(1.000000, 1.000000, 1.000000, 1.000000), r6.y
                    mul r5.w, r5.w, r6.x
                    max r5.w, r5.w, l(0.000000)
                    min r5.w, r5.w, l(1.000000)
                    mul r6.x, r5.w, l(-2.000000)
                    add r6.x, r6.x, l(3.000000)
                    mul r5.w, r5.w, r5.w
                    mul r5.w, r5.w, r6.x
                    mov r6.x, -r2.w
                    add r4.w, r4.w, r6.x
                    mul r4.w, r4.w, r5.w
                    add r2.w, r2.w, r4.w
                    iadd r3.w, r3.w, l(1)
                  endloop 
                  mov r2.w, r2.w  // r2.w <- <dist return value>
                
                #line 128
                  mov r0.w, -r1.w
                  add r5.z, r0.w, r2.w
                  dp3 r0.w, r5.xyzx, r5.xyzx
                  rsq r0.w, r0.w
                  mul r4.xyz, r0.wwww, r5.xyzx  // r4.x <- <normal return value>.x; r4.y <- <normal return value>.y; r4.z <- <normal return value>.z
                
                #line 160
                  mov r4.xyz, r4.xyzx  // r4.x <- n.x; r4.y <- n.y; r4.z <- n.z
                  dp3 r0.w, r0.xyzx, r4.xyzx
                  add r0.w, r0.w, r0.w
                  mov r0.w, -r0.w
                  mul r5.xyz, r0.wwww, r4.xyzx
                  add r5.xyz, r0.xyzx, r5.xyzx  // r5.x <- r.x; r5.y <- r.y; r5.z <- r.z
                  dp3 r0.w, r0.xyzx, r5.xyzx
                  mul r0.w, r0.w, l(0.500000)
                  add r0.w, r0.w, l(0.500000)  // r0.w <- reflectance
                  mov r1.z, l(1.000000)
                  mul r0.w, r0.w, r0.w
                  mul r0.w, r0.w, r1.z  // r0.w <- reflectance
                  dp3 r1.z, cb0[0].xyzx, r4.xyzx
                  mul r1.z, r1.z, l(0.500000)
                  add r1.z, r1.z, l(0.500000)  // r1.z <- diffuse
                  max r1.z, r1.z, l(0.000000)
                
                #line 167
                  nop 
                  mov r2.xyz, r2.xyzx
                  mov r4.xyz, r4.xyzx
                
                #line 146
                  mov r1.w, l(1.000000)  // r1.w <- occ
                  add r6.xyz, r2.xyzx, r4.xyzx  // r6.x <- p.x; r6.y <- p.y; r6.z <- p.z
                  mov r2.w, l(0)  // r2.w <- i
                  mov r7.xyz, r6.xyzx  // r7.x <- p.x; r7.y <- p.y; r7.z <- p.z
                  mov r3.w, r1.w  // r3.w <- occ
                  mov r4.w, r2.w  // r4.w <- i
                  loop 
                    ilt r5.w, r4.w, l(4)
                    breakc_z r5.w
                    nop 
                    mov r7.xyz, r7.xyzx
                
                #line 112
                    mov r5.w, l(1024.000000)  // r5.w <- d
                    mov r6.w, l(0)  // r6.w <- i
                    mov r7.w, r5.w  // r7.w <- d
                    mov r8.x, r6.w  // r8.x <- i
                    loop 
                      ilt r8.y, r8.x, l(9)
                      breakc_z r8.y
                      mov r8.yzw, x0[r8.x + 0].xxyz
                      add r8.yzw, r7.xxyz, r8.yyzw  // r8.y <- np.x; r8.z <- np.y; r8.w <- np.z
                      nop 
                      mov r9.x, -r8.y
                      max r9.x, r8.y, r9.x
                      mov r9.y, -r8.z
                      max r9.y, r8.z, r9.y
                      mov r9.z, -r8.w
                      max r9.z, r8.w, r9.z
                
                #line 105
                      max r9.y, r9.z, r9.y
                      max r9.x, r9.y, r9.x  // r9.x <- <max3 return value>
                
                #line 117
                      mov r9.y, l(-1.000000)
                      add r9.x, r9.y, r9.x  // r9.x <- shape0
                      dp3 r8.y, r8.yzwy, r8.yzwy
                      sqrt r8.y, r8.y
                      mov r8.z, l(-1.000000)
                      add r8.y, r8.z, r8.y  // r8.y <- shape1
                      mov r8.z, -r9.x
                      add r8.y, r8.z, r8.y
                      mul r8.y, r8.y, l(2.000000)
                      add r8.y, r8.y, r9.x  // r8.y <- nd
                      mov r8.z, -r8.y
                      add r8.z, r7.w, r8.z
                      mov r8.w, l(1.000000)
                      add r9.x, r8.w, l(1.000000)
                      add r8.z, r8.w, r8.z
                      div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.x
                      mul r8.z, r8.w, r8.z
                      max r8.z, r8.z, l(0.000000)
                      min r8.z, r8.z, l(1.000000)
                      mul r8.w, r8.z, l(-2.000000)
                      add r8.w, r8.w, l(3.000000)
                      mul r8.z, r8.z, r8.z
                      mul r8.z, r8.z, r8.w
                      mov r8.w, -r7.w
                      add r8.y, r8.w, r8.y
                      mul r8.y, r8.y, r8.z
                      add r7.w, r7.w, r8.y
                      iadd r8.x, r8.x, l(1)
                    endloop 
                    mov r7.w, r7.w  // r7.w <- <dist return value>
                
                #line 150
                    mov r7.w, r7.w  // r7.w <- dd
                    mul r8.xyz, r4.xyzx, r7.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    min r3.w, r3.w, r7.w
                    iadd r4.w, r4.w, l(1)
                  endloop 
                  max r1.w, r3.w, l(0.000000)  // r1.w <- <occlusion return value>
                
                #line 167
                  mul r1.w, r1.w, l(0.400000)
                  add r1.w, r1.w, l(0.600000)  // r1.w <- oa
                  nop 
                  mov r2.xyz, r2.xyzx
                  mov r4.xyz, cb0[0].xyzx
                
                #line 146
                  mov r2.w, l(1.000000)  // r2.w <- occ
                  add r6.xyz, r2.xyzx, r4.xyzx  // r6.x <- p.x; r6.y <- p.y; r6.z <- p.z
                  mov r3.w, l(0)  // r3.w <- i
                  mov r7.xyz, r6.xyzx  // r7.x <- p.x; r7.y <- p.y; r7.z <- p.z
                  mov r4.w, r2.w  // r4.w <- occ
                  mov r5.w, r3.w  // r5.w <- i
                  loop 
                    ilt r6.w, r5.w, l(4)
                    breakc_z r6.w
                    nop 
                    mov r7.xyz, r7.xyzx
                
                #line 112
                    mov r6.w, l(1024.000000)  // r6.w <- d
                    mov r7.w, l(0)  // r7.w <- i
                    mov r8.x, r6.w  // r8.x <- d
                    mov r8.y, r7.w  // r8.y <- i
                    loop 
                      ilt r8.z, r8.y, l(9)
                      breakc_z r8.z
                      mov r9.xyz, x0[r8.y + 0].xyzx
                      add r9.xyz, r7.xyzx, r9.xyzx  // r9.x <- np.x; r9.y <- np.y; r9.z <- np.z
                      nop 
                      mov r8.z, -r9.x
                      max r8.z, r8.z, r9.x
                      mov r8.w, -r9.y
                      max r8.w, r8.w, r9.y
                      mov r9.w, -r9.z
                      max r9.w, r9.w, r9.z
                
                #line 105
                      max r8.w, r8.w, r9.w
                      max r8.z, r8.w, r8.z  // r8.z <- <max3 return value>
                
                #line 117
                      mov r8.w, l(-1.000000)
                      add r8.z, r8.w, r8.z  // r8.z <- shape0
                      dp3 r8.w, r9.xyzx, r9.xyzx
                      sqrt r8.w, r8.w
                      mov r9.x, l(-1.000000)
                      add r8.w, r8.w, r9.x  // r8.w <- shape1
                      mov r9.x, -r8.z
                      add r8.w, r8.w, r9.x
                      mul r8.w, r8.w, l(2.000000)
                      add r8.z, r8.w, r8.z  // r8.z <- nd
                      mov r8.w, -r8.z
                      add r8.w, r8.w, r8.x
                      mov r9.x, l(1.000000)
                      add r9.y, r9.x, l(1.000000)
                      add r8.w, r8.w, r9.x
                      div r9.x, l(1.000000, 1.000000, 1.000000, 1.000000), r9.y
                      mul r8.w, r8.w, r9.x
                      max r8.w, r8.w, l(0.000000)
                      min r8.w, r8.w, l(1.000000)
                      mul r9.x, r8.w, l(-2.000000)
                      add r9.x, r9.x, l(3.000000)
                      mul r8.w, r8.w, r8.w
                      mul r8.w, r8.w, r9.x
                      mov r9.x, -r8.x
                      add r8.z, r8.z, r9.x
                      mul r8.z, r8.z, r8.w
                      add r8.x, r8.z, r8.x
                      iadd r8.y, r8.y, l(1)
                    endloop 
                    mov r8.x, r8.x  // r8.x <- <dist return value>
                
                #line 150
                    mov r8.x, r8.x  // r8.x <- dd
                    mul r8.yzw, r4.xxyz, r8.xxxx
                    add r7.xyz, r7.xyzx, r8.yzwy
                    min r4.w, r4.w, r8.x
                    iadd r5.w, r5.w, l(1)
                  endloop 
                  max r2.w, r4.w, l(0.000000)  // r2.w <- <occlusion return value>
                
                #line 168
                  mul r2.w, r2.w, l(0.950000)
                  add r2.w, r2.w, l(0.050000)  // r2.w <- od
                  nop 
                  mov r2.xyz, r2.xyzx
                  mov r5.xyz, r5.xyzx
                
                #line 146
                  mov r3.w, l(1.000000)  // r3.w <- occ
                  add r2.xyz, r2.xyzx, r5.xyzx
                  mov r4.x, l(0)  // r4.x <- i
                  mov r4.yzw, r2.xxyz  // r4.y <- p.x; r4.z <- p.y; r4.w <- p.z
                  mov r5.w, r3.w  // r5.w <- occ
                  mov r6.x, r4.x  // r6.x <- i
                  loop 
                    ilt r6.y, r6.x, l(4)
                    breakc_z r6.y
                    nop 
                    mov r4.yzw, r4.yyzw
                
                #line 112
                    mov r6.y, l(1024.000000)  // r6.y <- d
                    mov r6.z, l(0)  // r6.z <- i
                    mov r6.w, r6.y  // r6.w <- d
                    mov r7.x, r6.z  // r7.x <- i
                    loop 
                      ilt r7.y, r7.x, l(9)
                      breakc_z r7.y
                      mov r7.yzw, x0[r7.x + 0].xxyz
                      add r7.yzw, r4.yyzw, r7.yyzw  // r7.y <- np.x; r7.z <- np.y; r7.w <- np.z
                      nop 
                      mov r8.x, -r7.y
                      max r8.x, r7.y, r8.x
                      mov r8.y, -r7.z
                      max r8.y, r7.z, r8.y
                      mov r8.z, -r7.w
                      max r8.z, r7.w, r8.z
                
                #line 105
                      max r8.y, r8.z, r8.y
                      max r8.x, r8.y, r8.x  // r8.x <- <max3 return value>
                
                #line 117
                      mov r8.y, l(-1.000000)
                      add r8.x, r8.y, r8.x  // r8.x <- shape0
                      dp3 r7.y, r7.yzwy, r7.yzwy
                      sqrt r7.y, r7.y
                      mov r7.z, l(-1.000000)
                      add r7.y, r7.z, r7.y  // r7.y <- shape1
                      mov r7.z, -r8.x
                      add r7.y, r7.z, r7.y
                      mul r7.y, r7.y, l(2.000000)
                      add r7.y, r7.y, r8.x  // r7.y <- nd
                      mov r7.z, -r7.y
                      add r7.z, r6.w, r7.z
                      mov r7.w, l(1.000000)
                      add r8.x, r7.w, l(1.000000)
                      add r7.z, r7.w, r7.z
                      div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.x
                      mul r7.z, r7.w, r7.z
                      max r7.z, r7.z, l(0.000000)
                      min r7.z, r7.z, l(1.000000)
                      mul r7.w, r7.z, l(-2.000000)
                      add r7.w, r7.w, l(3.000000)
                      mul r7.z, r7.z, r7.z
                      mul r7.z, r7.z, r7.w
                      mov r7.w, -r6.w
                      add r7.y, r7.w, r7.y
                      mul r7.y, r7.y, r7.z
                      add r6.w, r6.w, r7.y
                      iadd r7.x, r7.x, l(1)
                    endloop 
                    mov r6.w, r6.w  // r6.w <- <dist return value>
                
                #line 150
                    mov r6.w, r6.w  // r6.w <- dd
                    mul r7.xyz, r5.xyzx, r6.wwww
                    add r4.yzw, r4.yyzw, r7.xxyz
                    min r5.w, r5.w, r6.w
                    iadd r6.x, r6.x, l(1)
                  endloop 
                  max r2.x, r5.w, l(0.000000)  // r2.x <- <occlusion return value>
                
                #line 169
                  mul r2.x, r2.x, l(0.950000)
                  add r2.x, r2.x, l(0.050000)  // r2.x <- os
                
                #line 177
                  mul r4.xyz, r1.wwww, r3.xyzx
                  mul r4.xyz, r4.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000)
                  mul r3.xyz, r1.zzzz, r3.xyzx
                  mul r2.yzw, r2.wwww, r3.xxyz
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.700000, 0.700000, 0.700000)
                  add r2.yzw, r2.yyzw, r4.xxyz
                  nop 
                  mov r5.xyz, r5.xyzx
                
                #line 135
                  mul r1.z, cb1[0].x, l(0.500000)
                  mul r1.z, r1.z, l(1.000000)  // r1.z <- t
                  dp3 r1.w, r5.xyzx, cb0[0].xyzx
                  mul r1.w, r1.w, l(0.500000)
                  add r1.w, r1.w, l(0.500000)  // r1.w <- qq
                  mov r1.w, r1.w  // r1.w <- bgl
                  nop 
                  mul r3.x, r1.w, l(6.000000)
                  add r3.x, r1.z, r3.x
                
                #line 83
                  div r3.y, r3.x, l(1.000000)
                  mov r3.z, -r3.y
                  max r3.w, r3.z, r3.y
                  ge r3.y, r3.y, r3.z
                  frc r3.z, r3.w
                  mov r3.w, -r3.z
                  movc r3.y, r3.y, r3.z, r3.w
                  mul r3.y, r3.y, l(1.000000)  // r3.y <- pm
                  mov r3.z, -r3.y
                  add r3.x, r3.z, r3.x  // r3.x <- pd
                  nop 
                  mov r3.x, r3.x
                  add r3.z, r3.x, l(1.000000)
                  mov r3.y, r3.y
                
                #line 73
                  nop 
                  mov r3.x, r3.x
                
                #line 57
                  mul r3.x, r3.x, l(0.012786)
                  sincos r3.x, null, r3.x
                  mul r3.x, r3.x, l(17143.320313)
                  frc r3.x, r3.x  // r3.x <- <hash return value>
                
                #line 73
                  mov r3.x, r3.x  // r3.x <- x0
                  nop 
                  mov r3.z, r3.z
                
                #line 57
                  mul r3.z, r3.z, l(0.012786)
                  sincos r3.z, null, r3.z
                  mul r3.z, r3.z, l(17143.320313)
                  frc r3.z, r3.z  // r3.z <- <hash return value>
                
                #line 74
                  mov r3.z, r3.z  // r3.z <- x1
                  mov r3.w, l(-0.000000)
                  add r4.x, r3.w, l(1.000000)
                  add r3.y, r3.w, r3.y
                  div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
                  mul r3.y, r3.w, r3.y
                  max r3.y, r3.y, l(0.000000)
                  min r3.y, r3.y, l(1.000000)
                  mul r3.w, r3.y, l(-2.000000)
                  add r3.w, r3.w, l(3.000000)
                  mul r3.y, r3.y, r3.y
                  mul r3.y, r3.y, r3.w  // r3.y <- interp
                  mov r3.w, -r3.x
                  add r3.z, r3.w, r3.z
                  mul r3.y, r3.z, r3.y
                  add r3.x, r3.y, r3.x  // r3.x <- <hashmix return value>
                
                #line 85
                  mov r3.x, r3.x  // r3.x <- <noise return value>
                
                #line 138
                  mul r3.x, r3.x, l(0.850000)
                  add r3.x, r1.w, r3.x
                  nop 
                  mul r3.y, r1.w, l(12.000000)
                  add r1.z, r1.z, r3.y
                
                #line 83
                  div r3.y, r1.z, l(1.000000)
                  mov r3.z, -r3.y
                  max r3.w, r3.z, r3.y
                  ge r3.y, r3.y, r3.z
                  frc r3.z, r3.w
                  mov r3.w, -r3.z
                  movc r3.y, r3.y, r3.z, r3.w
                  mul r3.y, r3.y, l(1.000000)  // r3.y <- pm
                  mov r3.z, -r3.y
                  add r1.z, r1.z, r3.z  // r1.z <- pd
                  nop 
                  mov r1.z, r1.z
                  add r3.z, r1.z, l(1.000000)
                  mov r3.y, r3.y
                
                #line 73
                  nop 
                  mov r1.z, r1.z
                
                #line 57
                  mul r1.z, r1.z, l(0.012786)
                  sincos r1.z, null, r1.z
                  mul r1.z, r1.z, l(17143.320313)
                  frc r1.z, r1.z  // r1.z <- <hash return value>
                
                #line 73
                  mov r1.z, r1.z  // r1.z <- x0
                  nop 
                  mov r3.z, r3.z
                
                #line 57
                  mul r3.z, r3.z, l(0.012786)
                  sincos r3.z, null, r3.z
                  mul r3.z, r3.z, l(17143.320313)
                  frc r3.z, r3.z  // r3.z <- <hash return value>
                
                #line 74
                  mov r3.z, r3.z  // r3.z <- x1
                  mov r3.w, l(-0.000000)
                  add r4.x, r3.w, l(1.000000)
                  add r3.y, r3.w, r3.y
                  div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
                  mul r3.y, r3.w, r3.y
                  max r3.y, r3.y, l(0.000000)
                  min r3.y, r3.y, l(1.000000)
                  mul r3.w, r3.y, l(-2.000000)
                  add r3.w, r3.w, l(3.000000)
                  mul r3.y, r3.y, r3.y
                  mul r3.y, r3.y, r3.w  // r3.y <- interp
                  mov r3.w, -r1.z
                  add r3.z, r3.w, r3.z
                  mul r3.y, r3.z, r3.y
                  add r1.z, r1.z, r3.y  // r1.z <- <hashmix return value>
                
                #line 85
                  mov r1.z, r1.z  // r1.z <- <noise return value>
                
                #line 138
                  mul r1.z, r1.z, l(0.850000)
                  add r1.z, r1.z, r3.x  // r1.z <- q
                  log r1.w, r1.w
                  mul r1.w, r1.w, l(32.000000)
                  exp r1.w, r1.w
                  mul r1.w, r1.w, l(2.000000)
                  add r1.z, r1.w, r1.z
                  mul r3.xyz, r1.zzzz, l(0.100000, 0.400000, 0.600000, 0.000000)  // r3.x <- sky.x; r3.y <- sky.y; r3.z <- sky.z
                  mov r3.xyz, r3.xyzx  // r3.x <- <background return value>.x; r3.y <- <background return value>.y; r3.z <- <background return value>.z
                
                #line 177
                  mul r3.xyz, r2.xxxx, r3.xyzx
                  mul r3.xyz, r0.wwww, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.700000, 0.700000, 0.700000, 0.000000)
                  add r2.xyz, r2.yzwy, r3.xyzx  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z
                
                #line 185
                  mov r2.xyz, r2.xyzx  // r2.x <- <object_material return value>.x; r2.y <- <object_material return value>.y; r2.z <- <object_material return value>.z
                
                #line 230
                  mov r2.xyz, r2.xyzx  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z
                else   // Prior locations: r2.x <- p.x; r2.y <- p.y; r2.z <- p.z; r1.z <- dd; r1.w <- i
                  nop 
                  mov r0.xyz, r0.xyzx
                
                #line 135
                  mul r0.w, cb1[0].x, l(0.500000)
                  mul r0.w, r0.w, l(1.000000)  // r0.w <- t
                  dp3 r0.x, r0.xyzx, cb0[0].xyzx
                  mul r0.x, r0.x, l(0.500000)
                  add r0.x, r0.x, l(0.500000)  // r0.x <- qq
                  mov r0.x, r0.x  // r0.x <- bgl
                  nop 
                  mul r0.y, r0.x, l(6.000000)
                  add r0.y, r0.w, r0.y
                
                #line 83
                  div r0.z, r0.y, l(1.000000)
                  mov r1.z, -r0.z
                  max r1.w, r0.z, r1.z
                  ge r0.z, r0.z, r1.z
                  frc r1.z, r1.w
                  mov r1.w, -r1.z
                  movc r0.z, r0.z, r1.z, r1.w
                  mul r0.z, r0.z, l(1.000000)  // r0.z <- pm
                  mov r1.z, -r0.z
                  add r0.y, r0.y, r1.z  // r0.y <- pd
                  nop 
                  mov r0.y, r0.y
                  add r1.z, r0.y, l(1.000000)
                  mov r0.z, r0.z
                
                #line 73
                  nop 
                  mov r0.y, r0.y
                
                #line 57
                  mul r0.y, r0.y, l(0.012786)
                  sincos r0.y, null, r0.y
                  mul r0.y, r0.y, l(17143.320313)
                  frc r0.y, r0.y  // r0.y <- <hash return value>
                
                #line 73
                  mov r0.y, r0.y  // r0.y <- x0
                  nop 
                  mov r1.z, r1.z
                
                #line 57
                  mul r1.z, r1.z, l(0.012786)
                  sincos r1.z, null, r1.z
                  mul r1.z, r1.z, l(17143.320313)
                  frc r1.z, r1.z  // r1.z <- <hash return value>
                
                #line 74
                  mov r1.z, r1.z  // r1.z <- x1
                  mov r1.w, l(-0.000000)
                  add r2.w, r1.w, l(1.000000)
                  add r0.z, r0.z, r1.w
                  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
                  mul r0.z, r0.z, r1.w
                  max r0.z, r0.z, l(0.000000)
                  min r0.z, r0.z, l(1.000000)
                  mul r1.w, r0.z, l(-2.000000)
                  add r1.w, r1.w, l(3.000000)
                  mul r0.z, r0.z, r0.z
                  mul r0.z, r0.z, r1.w  // r0.z <- interp
                  mov r1.w, -r0.y
                  add r1.z, r1.w, r1.z
                  mul r0.z, r0.z, r1.z
                  add r0.y, r0.z, r0.y  // r0.y <- <hashmix return value>
                
                #line 85
                  mov r0.y, r0.y  // r0.y <- <noise return value>
                
                #line 138
                  mul r0.y, r0.y, l(0.850000)
                  add r0.y, r0.y, r0.x
                  nop 
                  mul r0.z, r0.x, l(12.000000)
                  add r0.z, r0.w, r0.z
                
                #line 83
                  div r0.w, r0.z, l(1.000000)
                  mov r1.z, -r0.w
                  max r1.w, r0.w, r1.z
                  ge r0.w, r0.w, r1.z
                  frc r1.z, r1.w
                  mov r1.w, -r1.z
                  movc r0.w, r0.w, r1.z, r1.w
                  mul r0.w, r0.w, l(1.000000)  // r0.w <- pm
                  mov r1.z, -r0.w
                  add r0.z, r0.z, r1.z  // r0.z <- pd
                  nop 
                  mov r0.z, r0.z
                  add r1.z, r0.z, l(1.000000)
                  mov r0.w, r0.w
                
                #line 73
                  nop 
                  mov r0.z, r0.z
                
                #line 57
                  mul r0.z, r0.z, l(0.012786)
                  sincos r0.z, null, r0.z
                  mul r0.z, r0.z, l(17143.320313)
                  frc r0.z, r0.z  // r0.z <- <hash return value>
                
                #line 73
                  mov r0.z, r0.z  // r0.z <- x0
                  nop 
                  mov r1.z, r1.z
                
                #line 57
                  mul r1.z, r1.z, l(0.012786)
                  sincos r1.z, null, r1.z
                  mul r1.z, r1.z, l(17143.320313)
                  frc r1.z, r1.z  // r1.z <- <hash return value>
                
                #line 74
                  mov r1.z, r1.z  // r1.z <- x1
                  mov r1.w, l(-0.000000)
                  add r2.w, r1.w, l(1.000000)
                  add r0.w, r0.w, r1.w
                  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
                  mul r0.w, r0.w, r1.w
                  max r0.w, r0.w, l(0.000000)
                  min r0.w, r0.w, l(1.000000)
                  mul r1.w, r0.w, l(-2.000000)
                  add r1.w, r1.w, l(3.000000)
                  mul r0.w, r0.w, r0.w
                  mul r0.w, r0.w, r1.w  // r0.w <- interp
                  mov r1.w, -r0.z
                  add r1.z, r1.w, r1.z
                  mul r0.w, r0.w, r1.z
                  add r0.z, r0.w, r0.z  // r0.z <- <hashmix return value>
                
                #line 85
                  mov r0.z, r0.z  // r0.z <- <noise return value>
                
                #line 138
                  mul r0.z, r0.z, l(0.850000)
                  add r0.y, r0.z, r0.y  // r0.y <- q
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(32.000000)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(2.000000)
                  add r0.x, r0.x, r0.y  // r0.x <- q
                  mul r2.xyz, r0.xxxx, l(0.100000, 0.400000, 0.600000, 0.000000)  // r2.x <- sky.x; r2.y <- sky.y; r2.z <- sky.z
                  mov r2.xyz, r2.xyzx  // r2.x <- <background return value>.x; r2.y <- <background return value>.y; r2.z <- <background return value>.z
                
                #line 232
                  mov r2.xyz, r2.xyzx  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z
                endif 
                
                #line 235
                mul r0.xyz, r2.xyzx, l(0.850000, 0.850000, 0.850000, 0.000000)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                mul r2.xyz, r0.xyzx, r0.xyzx
                mov r3.xyz, -r0.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r2.xyz, r2.xyzx, l(0.300000, 0.300000, 0.300000, 0.000000)
                add r0.xyz, r0.xyzx, r2.xyzx
                nop 
                add r1.zw, r1.xxxy, r0.xxxy
                
                #line 62
                dp2 r0.w, r1.zwzz, l(2.310000, 53.209999, 0.000000, 0.000000)
                mul r0.w, r0.w, l(124.123001)
                sincos null, r0.w, r0.w
                mul r0.w, r0.w, l(412.000000)
                frc r0.w, r0.w  // r0.w <- <hash return value>
                
                #line 237
                mul r0.w, r0.w, l(0.015000)
                mov r2.xyz, -r0.wwww
                add r0.xyz, r0.xyzx, r2.xyzx
                dp2 r0.w, r1.xyxx, r1.xyxx
                sqrt r0.w, r0.w
                mul r0.w, r0.w, l(0.100000)
                mov r1.xyz, -r0.wwww
                add r0.xyz, r0.xyzx, r1.xyzx
                nop 
                mov r0.xyz, r0.xyzx
                mov r0.w, l(0.500000)
                mov r1.x, l(0.600000)
                
                #line 67
                add r1.y, r0.y, r0.x
                add r1.y, r0.z, r1.y  // r1.y <- w
                mul r2.xyz, r0.wwww, r1.yyyy
                mul r0.w, r1.x, r1.y
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- <cc return value>.x; r0.y <- <cc return value>.y; r0.z <- <cc return value>.z
                
                #line 239
                mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                mov r0.xyz, r0.xyzx  // r0.x <- pin.Color.x; r0.y <- pin.Color.y; r0.z <- pin.Color.z
                mov r0.w, l(1.000000)  // r0.w <- pin.Color.w
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 936 instruction slots used
                            
            };
        }

    }

}

